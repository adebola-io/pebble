{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Pebble",
  "patterns": [
    { "include": "#comment" },
    { "include": "#string" },
    { "include": "#character" },
    { "include": "#number" },
    { "include": "#literal" },
    { "include": "#injunction" },
    { "include": "#keyword" },
    { "include": "#identifier" }
  ],
  "repository": {
    "comment": {
      "patterns": [
        { "include": "#doc_comment" },
        { "include": "#line_comment" },
        { "include": "#block_comment" }
      ]
    },
    "doc_comment": {
      "name": "comment.doc",
      "begin": "^\\s*##",
      "end": "\n"
    },
    "line_comment": {
      "name": "comment.line",
      "begin": "//",
      "end": "\n"
    },
    "block_comment": {
      "name": "comment.block",
      "begin": "\\/\\*",
      "end": "\\*\\/"
    },
    "string": {
      "name": "string.quoted meta.string",
      "begin": "\"",
      "patterns": [
        { "include": "#string_character_escape" },
        { "include": "#string_template_expression" }
      ],
      "end": "\""
    },
    "string_character_escape": {
      "name": "constant.character.escape",
      "match": "\\\\(x[\\dA-Fa-f]{2}|u([\\dA-Fa-f]{4}|\\{[\\dA-Fa-f]+\\})|[0-2][0-7]{0,2}|(3[0-6]|37|[4-7])[0-7]?|.|$)"
    },
    "string_template_expression": {
      "name": "meta.template.expression",
      "begin": "#{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.expression.embedded-expression-start constant.language.embedded.start"
        }
      },
      "patterns": [{ "include": "$self" }],
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.expression.embedded-expression-end constant.language.embedded.end"
        }
      }
    },
    "character": {
      "name": "character constant.character meta.character string",
      "match": "'(.{1}|(\\\\(x[\\dA-Fa-f]{2}|u([\\dA-Fa-f]{4}|\\{[\\dA-Fa-f]+\\})|[0-2][0-7]{0,2}|(3[0-6]|37|[4-7])[0-7]?|.|$)))'",
      "captures": {
        "2": {
          "name": "constant.character.escape"
        }
      }
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.hex",
          "match": "\\b(?<!\\$)0(?:x|X)[\\dA-Fa-f]+(n)?\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.octal",
          "match": "\\b(?<!\\$)0(?:o|O)[0-7]+(n)?\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.binary",
          "match": "\\b(?<!\\$)0(?:b|B)[0-1]+(n)?\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.decimal",
          "match": "\\b\\d+((\\.\\d+)|n)?\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.exponent",
          "match": "\\b\\d+e\\d+\\b(?!\\$)"
        }
      ]
    },
    "literal": {
      "name": "constant.language.literal",
      "match": "\\b(?<![\\d$@])(true|false|self|nothing|lib|new)(?![$@])\\b"
    },
    "injunction": {
      "name": "keyword.injunction",
      "match": "\\b(?<![$@])@(use|public|prepend|type|let|function|constant|enum|struct|utilize|interface|implement)(?<![$@])\\b"
    },
    "keyword": {
      "name": "keyword.control",
      "match": "\\b(?<![$@\\.])(for|in|while|break|continue|crash|try|restore|println|if|else|from|as|return)(?<![$@])\\b"
    },
    "identifier": {
      "name": "identifier meta.identifier variable.identifier",
      "match": "\\b(?<![\\d$@])\\w+(?<![\\d$@])\\b"
    }
  },
  "scopeName": "source.peb"
}
