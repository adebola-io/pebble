use std::fmt::Display;

#[derive(Debug, PartialEq)]
pub enum SyntaxError {
    NamedFunctionExpr,
    UninitializedTypeAlias,
    UninitializedConstant,
    UninitializedUntypedVariable,
    ExpectedImportSource,
    ExpectedImport,
    UnclosedImportSpace,
    StrayImplement,
    IllegalElse,
    IllegalRecover,
    DynamicRecordMap,
    ExpectedFunctionName,
    ExpectedParameterName,
    ExpectedVariableName,
    ExpectedPropertyName,
    ExpectedInterfaceName,
    ExpectedTypeName,
    ExpectedGenericTypeParameter,
    ExpectedReturnType,
    ExpectedAModuleName,
    ExpectedIdentifier,
    ExpectedAs,
    ExpectedFrom,
    ExpectedIn,
    ExpectedSemiColon,
    ExpectedColon,
    ExpectedFunctionArgument,
    ExpectedLParen,
    ExpectedRParen,
    ExpectedLCurly,
    ExpectedRCurly,
    ExpectedLSquareBrac,
    ExpectedRSquareBrac,
    ExpectedLAngleBrac,
    ExpectedRAngleBrac,
    ExpectedCommaOrRSquareBrac,
    ExpectedCommaOrRCurly,
    ExpectedCommaOrRAngleBrac,
    ExpectedArrow,
    ExpectedExpression,
    UnrecognizedInjunction,
    UnexpectedOperator,
    UnexpectedKeyword,
    IllegalDeclaration,
}

impl Display for SyntaxError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}.",
            match self {
                SyntaxError::NamedFunctionExpr => "Anonymous function expressions cannot be named. Consider using a let binding to define this function dynamically",
                SyntaxError::UninitializedTypeAlias => "Type alias must be initialized as they are declared",
                SyntaxError::UninitializedConstant => "All constants must be initialized as they are declared",
                SyntaxError::UninitializedUntypedVariable => "Variable declarations without initializers require type labels",
                SyntaxError::ExpectedImportSource => "Expected an import source",
                SyntaxError::ExpectedImport => "Expected an import",
                SyntaxError::UnclosedImportSpace => "Unclosed import space",
                SyntaxError::StrayImplement => "@implement clauses can only be used within classes or other interfaces",
                SyntaxError::IllegalElse => "Illegal else statement",
                SyntaxError::IllegalRecover => "Illegal recover statement. Recover blocks must be attached to a corresponding try statement",
                SyntaxError::DynamicRecordMap => "Records cannot consist of values that are dynamically computed. They may only store static values, like strings, numbers and booleans",
                SyntaxError::ExpectedFunctionName => "Expected a function name",
                SyntaxError::ExpectedParameterName => "Expected a parameter",
                SyntaxError::ExpectedVariableName => "Expected a variable name",
                SyntaxError::ExpectedPropertyName => "Expected a property, implementation or a method",
                SyntaxError::ExpectedInterfaceName => "Expected an interface name",
                SyntaxError::ExpectedTypeName => "Expected type name",
                SyntaxError::ExpectedGenericTypeParameter => "Expected a generic parameter",
                SyntaxError::ExpectedReturnType => "Expected a return type",
                SyntaxError::ExpectedAModuleName => "Expected a module name",
                SyntaxError::ExpectedIdentifier => "Expected an identifier",
                SyntaxError::ExpectedAs => "Expected an 'as'",
                SyntaxError::ExpectedFrom => "Expected a 'from'",
                SyntaxError::ExpectedIn => "Expected an 'in'",
                SyntaxError::ExpectedSemiColon => "Expected a semicolon",
                SyntaxError::ExpectedColon => "Expected a :",
                SyntaxError::ExpectedFunctionArgument => "Expected a function argument",
                SyntaxError::ExpectedLParen => "Expected a (",
                SyntaxError::ExpectedRParen => "Expected a )",
                SyntaxError::ExpectedLCurly => "Expected a {",
                SyntaxError::ExpectedRCurly => "Expected a }",
                SyntaxError::ExpectedLSquareBrac => "Expected a [",
                SyntaxError::ExpectedRSquareBrac => "Expected a ]",
                SyntaxError::ExpectedLAngleBrac => "Expected a <",
                SyntaxError::ExpectedRAngleBrac => "Expected a >",
                SyntaxError::ExpectedCommaOrRSquareBrac => "Expected a , or )",
                SyntaxError::ExpectedCommaOrRCurly => "Expected a , or }",
                SyntaxError::ExpectedCommaOrRAngleBrac => "Expected a , or >",
                SyntaxError::ExpectedArrow => "Expected ->",
                SyntaxError::ExpectedExpression => "Expected an expression",
                SyntaxError::UnrecognizedInjunction => "Unknown injunction",
                SyntaxError::UnexpectedOperator => "Unexpected operator",
                SyntaxError::UnexpectedKeyword => "Unexpected keyword",
                SyntaxError::IllegalDeclaration => "Variables cannot be declared here. Consider moving the declaration inside a block",
            }
        )
    }
}
